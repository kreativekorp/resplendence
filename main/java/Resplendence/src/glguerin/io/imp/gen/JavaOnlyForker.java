/*** Copyright 1998, 1999, 2001, 2002 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely, alter carefully.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the MacBinary Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/#macbinary> */package glguerin.io.imp.gen;import java.io.*;import glguerin.io.*;// --- Revision History ---// 26Mar99 GLG  create with generic methods// 29Mar99 GLG  add support for withComment flag to two methods// 30Mar99 GLG  rework comment support, removing withComment arg from setCatalogInfo()// 30Mar99 GLG  add selfResolve()// 02Apr99 GLG  add throwing of UnsupportedIOException for unsupported features// 02Apr99 GLG  expand doc-comments// 05Apr99 GLG  add boolean arg to getTargetFileExisting()// 06Apr99 GLG  add comments that setLock() isn't called by setCatalogInfo()// 06Apr99 GLG  add calculation of synthesized when-created & when-modified to getCatalogInfo()// 08Apr99 GLG  rescope some methods from private to protected// 14Apr99 GLG  comments// 04May99 GLG  add exists(), isFile(), isDirectory(), isAlias()// 07May99 GLG  add canRead(), canWrite(), delete(), renameLeaf(), moveTo()// 08May99 GLG  revise moveTo()'s behavior// 02Jun99 GLG  cover package changes// 27Apr01 GLG  refactor from original GenericForker class// 27Apr01 GLG  revise makeResolved() to use File.getCanonicalPath()// 03May01 GLG  convert to use Pathname// 17May01 GLG  remove determined() -- redundant: identical to makeResolved()// 21May01 GLG  remove direct escaping support// 22May01 GLG  add isHidden() implementation// 07Jun01 GLG  change package name// 15Jun01 GLG  add faked getFileAccess(), setFileAccess()// 25Jun01 GLG  add makeDir()// 09May2002 GLG  replace calls to actualTarget() with calls to getPathname()// 09Dec2002 GLG  refactor, moving most code into PlainForker/**** A JavaOnlyForker is a subclass of PlainForker that throws IOExceptions for all resource-fork access.**** @author Gregory Guerin**** @see PlainForker** @see GenericForker** @see glguerin.io.FileForker** @see java.io.File*/public class JavaOnlyForker  extends PlainForker{	/**	** Vanilla constructor, visible to all.	*/	public	JavaOnlyForker()	{  super();  }	/**	** Configuring constructor, visible to all.	*/	public	JavaOnlyForker( int nameLimit )	{  super( nameLimit );  }	/**	** Throw an UnsupportedIOException if the resFork flag is true, do nothing if it's false.	*/	protected void	checkResourceForking( boolean resFork )	  throws UnsupportedIOException	{		if ( resFork )			throw new UnsupportedIOException( "Resource forks not supported" );	}	// ###  F O R K E R   I / O - F A C T O R I E S  ###	/**	** This implementation throws an UnsupportedIOException if resFork is set,	** otherwise it returns a new FileInputStream.	** Opening the FileInputStream may throw an IOException itself.	*/	public InputStream	makeForkInputStream( boolean resFork )	  throws IOException	{		checkResourceForking( resFork );		return ( super.makeForkInputStream( resFork ) );	}	/**	** This implementation throws an UnsupportedIOException if resFork is set,	** otherwise it returns a new FileOutputStream.	** Opening the FileOutputStream may throw an IOException itself.	*/	public OutputStream	makeForkOutputStream( boolean resFork, boolean append )	  throws IOException	{		checkResourceForking( resFork );		return ( super.makeForkOutputStream( resFork, append ) );	}	/**	** This implementation throws an UnsupportedIOException if resFork is set,	** otherwise it returns a new RandomRWFile.	** Opening the RandomRWFile may throw an IOException itself.	*/	public RandomRW	makeForkRandomRW( boolean resFork, boolean readWrite )	  throws IOException	{		checkResourceForking( resFork );		return ( super.makeForkRandomRW( resFork, readWrite ) );	}}