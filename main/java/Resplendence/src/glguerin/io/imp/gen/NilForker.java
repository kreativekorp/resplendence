/*** Copyright 2006 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the MacBinary Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/#macbinary> */package glguerin.io.imp.gen;import java.io.*;import glguerin.io.*;// --- Revision History ---// 30Mar2006 GLG  create for use in diagnostics and tests/**** A NilForker is a subclass of PlainForker that never accesses a file or file-system at all.** It's useful in diagnostic and testing.**<p>** Regardless of its pathname, the referenced file always appears as an existing zero-length file.** All file-reading will detect an immediate EOF or a zero-length file.** All file-writing will be quietly consumed.** All attempts to increase the file's size are done without failure, but have no effect.** The apparent file will always be zero-length.**** @author Gregory Guerin**** @see PlainForker*/public class NilForker  extends PlainForker{	/**	** Plain constructor.	** Provides a 255-char name-limit on each Pathname element.	*/	public	NilForker()	{  super( 255 );  }	/** Always throws IOException.  Should never be called. */	protected File	getTargetFile()	  throws IOException	{  throw new UnsupportedIOException( "Impossible: " + getPath() );  }	// ###  I S O M O R P H S   O F   F I L E   M E T H O D S  ###	/** Always returns true, regardless of pathname. */	public boolean	exists()	{  return ( true );  }	/** Always returns true, regardless of pathname. */	public boolean	isFile()	{  return ( true );  }	/** Always returns false, regardless of pathname. */	public boolean	isDirectory()	{  return ( false );  }	/** Always returns false, regardless of pathname. */	public boolean	isHidden()	{  return ( false );  }	/** Always returns true, regardless of pathname. */	public boolean	canRead()	{  return ( true );  }	/** Always returns true, regardless of pathname. */	public boolean	canWrite()	{  return ( true );  }	/** Always returns 0, regardless of pathname or resFork (i.e. both forks always empty). */	public long	length( boolean resFork )	{  return ( 0 );  }	/** Since never a directory, always returns null. */	public String[]	list()	{  return ( null );  }	/** Always returns true, signifying success, but continues to return true for exists(). */	public boolean	delete()	{  return ( true );  }	/** Always returns throws IOException. */	public boolean	makeDir()	  throws IOException	{  throw new IOException( "Can't create directory: " + getPath() );  }	/** Always succeeds. */	public void	renameLeaf( String newName )	  throws IOException	{  getPathname().swap( newName );  }	/** Always succeeds. */	public void	moveTo( Pathname destination )	  throws IOException	{  getPathname().set( destination );  }	// ###  F O R K E R   C A T A L O G - I N F O   &   F I L E - A C C E S S  ###	/**	** Always succeeds.	** The FileInfo is nearly empty, except for name and file/dir state.	*/	public FileInfo	getFileInfo( boolean withComment )	  throws IOException	{  return ( new BasicFileInfo( false, getLeafName() ) );  }	/** Always succeeds, but has no effect. */	public void	setFileInfo( FileInfo info )	  throws IOException	{  return;  }	/** Always succeeds.	** The FileAccess has all RW permissions, and owner and group of ID_UNKNOWN.	*/	public FileAccess	getFileAccess()	  throws IOException	{  return ( new FileAccess( FileAccess.ACCESS_READ | FileAccess.ACCESS_WRITE ) );  }	/** Always succeeds, but has no effect. */	public void	setFileAccess( FileAccess desired, boolean isLocked )	  throws IOException	{  return;  }	/** Always succeeds, with empty comment. */	public String	getComment()	  throws IOException	{  return ( "" );  }	/** Always succeeds, but has no effect. */	public void	setComment( String comment )	  throws IOException	{  return;  }	/** Always succeeds, returning replica Pathname. */	public Pathname	makeResolved()	  throws IOException	{  return ( 	getPathReplica() );  }	// ###  F O R K E R   I / O - F A C T O R I E S  ###	/** Returns a zero-length InputStream. */	public InputStream	makeForkInputStream( boolean resFork )	  throws IOException	{  return ( new RandomRWInputStream( makeForkRandomRW( resFork, false ) ) );  }	/** Returns a writable bit-bucket OutputStream. */	public OutputStream	makeForkOutputStream( boolean resFork, boolean append )	  throws IOException	{  return ( new RandomRWOutputStream( makeForkRandomRW( resFork, true ) ) );  }	/** Always returns a RandomRWSink.  */	public RandomRW	makeForkRandomRW( boolean resFork, boolean readWrite )	  throws IOException	{  return ( new RandomRWSink() );  }}