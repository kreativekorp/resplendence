/*** Copyright 1998, 1999, 2001, 2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely, alter carefully.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the MacBinary Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/#macbinary> */package glguerin.io.imp.gen;import java.io.*;import com.apple.mrj.*;import glguerin.io.*;import glguerin.util.MacPlatform;// --- Revision History ---// 08Apr99 GLG  create as semi-generic testing stub// 12Apr99 GLG  name changes// 14Apr99 GLG  comment tweaks// 27Apr01 GLG  refactor from earlier GenericForker and ResourcelessForker// 21May01 GLG  remove direct escaping support// 07Jun01 GLG  change package name// 07Jun01 GLG  revise makeForkXXX() factory methods// 09Dec2002 GLG  revise to extend PlainForker// 29Jan2003 GLG  add call to MRJApplicationUtils.isMRJToolkitAvailable()/**** A GenericForker is a subclass of PlainForker that adds a ** simple FileInfo implementation using MRJToolkit methods.** This class provides working implementations of setDefaultTypes() and** getDefaultType() and getDefaultCreator().** Like PlainForker, it fakes resource-forks as always-empty.**<p>** If the MRJToolkit is unavailable, as indiciate by the method ** MRJApplicationUtils.isMRJToolkitAvailable(),** then no MRJFileUtils methods are ever called.** This is done so that an implementation of MRJToolkit-stubs need not allow** its methods to be called.**<p>** This class depends on MRJToolkit, and so may not be suitable for some uses.** In particular, Cocoa-Java programs on Mac OS X are hostile to MRJToolkit, and will hang.**** @author Gregory Guerin*/@SuppressWarnings("deprecation")public class GenericForker  extends PlainForker{	private static boolean canMRJ;	private static int fileType;	private static int fileCreator;	static	{		// This invocation returns F when the stubs are called on non-Mac platforms.		canMRJ = MRJApplicationUtils.isMRJToolkitAvailable();		boolean isClassicMac = ( MacPlatform.isMacOS()  &&  MacPlatform.getOSVersion()[ 0 ] < 10 );		if ( isClassicMac )		{			fileType = FileInfo.OSTYPE_UNKNOWN;			fileCreator = FileInfo.OSTYPE_UNKNOWN;		}		else		{			fileType = 0;			fileCreator = 0;		}	}	/**	** Vanilla constructor, visible to all.	*/	public	GenericForker()	{  super();  }	/**	** Configuring constructor, visible to all.	*/	public	GenericForker( int nameLimit )	{  super( nameLimit );  }	/**	** Set the creator and file types that newly created files will have by default.	** Calling this method on any concrete FileForker instance sets the defaults for	** all concrete instances of the same class.	*/	public void	setDefaultTypes( int defaultFileType, int defaultFileCreator )	{		fileType = defaultFileType;		fileCreator = defaultFileCreator;	}	/**	** Called by makeForkOutputStream() and makeForkRandomRW(),	** or anywhere else a file needs to be created.  NOT called when an existing	** file is merely truncated.	*/	public int	getDefaultFileType()	{  return ( fileType );  }	/**	** Called by makeForkOutputStream() and makeForkRandomRW(),	** or anywhere else a file needs to be created.  NOT called when an existing	** file is merely truncated.	*/	public int	getDefaultFileCreator()	{  return ( fileCreator );  }	// ###  F O R K E R   C A T A L O G - I N F O  ###	/**	** Get a FileInfo describing the current target <b>WITHOUT</b> resolving any aliases	** that the target may contain.	** If withComment is false, the returned FileInfo will have no comment-bytes.	** If withComment is true, the target's comment-bytes from this.getComment()  	** are attached to the returned FileInfo.  	** Retrieving the comment takes extra time, which may not suit your purposes.	**<p>	** This implementation uses the super's method, then calls on MRJToolkit's MRJFileUtils	** to get the file-type and file-creator info.	**	** @exception java.io.IOException	**    Thrown if the target-item does not exist, or any of the directories leading to it don't exist,	**  or the volume or drive doesn't exist.  Actually throws a FileNotFoundException in those cases.	**  Throws a vanilla IOException if there's any other error while completing the operation.	**	** @see #getComment	** @see glguerin.util.MacTime	*/	public FileInfo	getFileInfo( boolean withComment )	  throws IOException	{		FileInfo info = super.getFileInfo( withComment );		if ( canMRJ  &&  ! info.isDirectory() )		{			File target = getTargetFile();			info.setFileType( MRJFileUtils.getFileType( target ).toInt() );			info.setFileCreator( MRJFileUtils.getFileCreator( target ).toInt() );		}		return ( info );	}	/**	** Set the current target's FileInfo, creating an empty ordinary file if	** the current target-file does not exist.  All directories leading up to the target	** must already exist.	**<p>	** The state of isLocked() in the given info is not applied to the target file.	** To set or clear the file-lock on a target, you must invoke setFileAccess().	**<p>	** If the given FileInfo has a non-zero comment, then the comment is saved	** by calling setComment().	** If the given FileInfo has a zero-length comment, then no comment is saved,	** nor is any existing comment attached to the target file removed.	** To remove a comment from an existing target, you must call setComment()	** with a null or zero-length array.	**<p>	** This implementation calls getTargetExists(true), then calls on MRJToolkit's MRJFileUtils	** to set the file-type and file-creator info.	**	** @see #setComment	** @see #setLock	*/	public void	setFileInfo( FileInfo info )	  throws IOException	{		File target = getTargetExists( true );		if ( canMRJ  &&  target.isFile() )		{			// Only set the values for non-directories.			MRJOSType type = new MRJOSType( info.getFileType() );			MRJOSType creator = new MRJOSType( info.getFileCreator() );			MRJFileUtils.setFileTypeAndCreator( target, type, creator );		}	}	/**	** Assign default creator and file-type.	*/	protected void	assignDefaults( File target )	  throws IOException	{		if ( canMRJ  &&  target.isFile() )		{			// Only set the values for non-directories.			MRJOSType type = new MRJOSType( getDefaultFileType() );			MRJOSType creator = new MRJOSType( getDefaultFileCreator() );			MRJFileUtils.setFileTypeAndCreator( target, type, creator );		}	}}