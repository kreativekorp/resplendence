/*** Copyright 1998, 1999, 2001 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely, alter carefully.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the MacBinary Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/#macbinary> */package glguerin.io.imp.mac;import java.io.IOException;/**** CommentAccess defines the means to access comments in the desktop database.** It defines a getter and a setter, getCommentBytes() and writeComment(), respectively.** The typical life-cycle of CommentAccess is to construct an empty instance,** invoke setTarget() with appropriate values, then invoke getCommentBytes() and/or** writeComment().  A single CommentAccess instance can be retargeted to any target file or** folder, then getCommentBytes() or writeComment() invoked.  This is unlike java.io.File.** which is immutable after construction.**<p>** An implementation must also provide internal access to the desktop database** identifiers known as DTRefNum's.  **<p>** It is possible to add desktop-icon features, either by extending this interface or by building an** IconAccessor that retrieves DTRefNum's from an implementation of CommentAccess.  ** This is left as an exercise for the interested reader.**<p>** The Apple reference materials I used to build this interface and its implementations are:**<ul type="disc">**   <li> <i>Inside Macintosh: More Macintosh ToolBox</i><br>**    Chapter 9 covers everything about the desktop database.**    I used PBDTGetPath(), PBDTGetCommentSync(), PBDTSetCommentSync(), **    PBDTRemoveCommentSync(), and PBDTFlushSync() for the implementations.**   </li>**   <li> <i>Mac Sample Code: MoreFiles -- MoreDesktopMgr.c</i><br>**    The DTGetComment() function has a couple interesting comments.**    First, some file-systems (notably Apple Photo Access) will return comments longer**    than 200 bytes, i.e. up to the full 256 bytes of a PStr255.  Note that the buffer MUST**    be long enough to accomodate this, or much havoc ensues.**    Second, ioDTReqCount is an input field to PBDTGetCommentSync, at least under**    some file-systems (including AppleShare).  The value declares the length of the text buffer,**    which DOES NOT include a leading PStr count-byte.**   </li>**</ul>**** @author Gregory Guerin*/public interface CommentAccess{	/**	** OSErr value returned when information about target isn't found.	*/	public static final int afpItemNotFound = -5012;	/** Limit on comment length. */	public static final int MAX = 200;	/**	**<ul>	**  <li><b>DTPBRec</b> = 104 = size of DTPBRec</li>	**  <li><b>IONameStr</b> = 64 = size of name buffer</li>	**  <li><b>CommentText</b> = 256 = size of comment-text buffer</li>	**</ul>	*/	public static final int		DTPBRec = 104,		IONameStr = 64,		CommentText = 256;	/**	** Offset within struct where the name-buffer is located,	** i.e. after the DTPBRec located at offset 0.	*/	public static final int NAMEBUF_AT = DTPBRec;	/**	** Offset within struct where the comment-text buffer is located,	** i.e. after the DTPBRec and name-buffer.	*/	public static final int TEXTBUF_AT = DTPBRec + IONameStr;	/**	** Overall size of the struct, measured in bytes.	*/	public static final int SIZE = DTPBRec + IONameStr + CommentText;	/**	** Offsets of items within DTPBRec struct.	** There are more fields than these, but these are the comment-relevant ones.	*/	public static final int		NAMEPTR_AT = 18,		// a ptr		VREFNUM_AT = 22,		// a short		DTREFNUM_AT = 24,		// a short		DTBUFPTR_AT = 32,	// a ptr		DTREQCOUNT_AT = 36,		// an int		DTACTUALCOUNT_AT = 40,		// an int		DIR_ID_AT = 48;		// an int	// ###  A C C E S S O R S  ###	/**	** Clear the instance, then set the internal fields from the given values.	** An implementation will internally translate the volRefNum into a DTRefNum,	** as the implementation requires.	*/	public void 	setTarget( FSSpec target );	// ###  O P E R A T O R S  ###	/**	** Call PBDTGetComment() using current struct's data,	** throwing an IOException on errors.	** If no comment exists for the target item, a zero-length byte[] is returned.	** This method does not distinguish between non-existent targets and	** targets that lack a comment.  Both return a zero-length byte[].	*/	public byte[]	getCommentBytes()	  throws IOException;	/**	** Either set or remove the current target's comment-bytes,	** depending on the nature of text.  	** If text is null or zero-length, any existing comment is removed.	** If text is 1 or more bytes, the comment is set.	** Either case is followed by a flush.	**<p>	** The text is ordinary bytes, NOT a PStr.	*/	public void	writeComment( byte[] text )	  throws IOException;}