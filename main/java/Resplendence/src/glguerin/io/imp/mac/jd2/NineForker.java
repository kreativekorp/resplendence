/*** Copyright 2001, 2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely, alter carefully.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the MacBinary Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/#macbinary> */package glguerin.io.imp.mac.jd2;import java.io.*;import glguerin.io.*;import glguerin.io.imp.mac.*;// --- Revision History ---// 22Jun01 GLG  create// 23Jan2003 GLG  add isSymlink() imp// 23Jan2003 GLG  add comments about symlink on-the-fly resolving/**** A NineForker is an implementation of FileForker for MRJ 2.2 or later on Mac OS 9,** which relies on JDirect-2 for native-code calls,** providing long UniCode names, forks beyond 2 GB, and real FileAccess privileges.**<p>** NineForker resolves non-leaf symlinks on-the-fly.** It does this because the underlying FSRef APIs do so, at least in some cases.** There is code in FSRefItem9 that does it correctly on all symlinks, not just** the ones the FSRef APIs happen to work on.**<p>** If you want to resolve all non-leaf aliases on-the-fly,** use ResolvingNineForker.** Use its fully-qualified class-name as the factory-name ** to FileForker.SetFactory(), and you'll get instances of this class when you** call FileForker.MakeOne().**** @author Gregory Guerin**** @see TenFSFork** @see TenFSRefItem*/public class NineForker  extends FSForker{	/**	** Vanilla constructor.	*/	public	NineForker()	{  		super();  	}	/** Make a concrete FSItem. */	protected FSItem	newFSItem()	{  return ( new FSRefItem9() );  }	/**	** Return true if the current target is a symlink, false if not.	**<p>	** This imp identifies symlinks by examining the FileInfo of the target.	** On Mac OS 9 (works on 9.2.1, probably earlier) a symlink appears to the FSRef-based	** code as a file with the following characteristics:	**<ul>	**  <li>Finder-flags indicate isAlias</li>	**  <li>data-fork length non-zero</li>	**  <li>resource-fork length zero</li>	**  <li>file-type of 'slnk' 0x736C6E6B</li>	**  <li>creator of 'rhap' 0x72686170</li>	**</ul>	** These characteristics even appear for symlinks on a UFS volume	** that has no other Mac OS metadata.	*/	public boolean	isSymlink()	{		try		{			// The FileInfo must have file-type and creator, also fork-lengths,			// so the brief FSItem.getInfo() form won't do.			FileInfo info = target( false, false ).getInfo( true );			if ( info.isAlias()  &&  info.getForkLength( false ) > 0					&&  info.getForkLength( true ) == 0					&&  info.getFileType() == 0x736C6E6B  // 'slnk'					&&  info.getFileCreator() == 0x72686170 )  // 'rhap'			{  return ( true );  }		}		catch ( IOException why )		{  /* FALL THROUGH */  }		return ( false );	}	private static int fileType = FileInfo.OSTYPE_UNKNOWN;	private static int fileCreator = FileInfo.OSTYPE_UNKNOWN;	/**	** Set the creator and file types that newly created files will have by default.	** Calling this method on any concrete FileForker instance sets the defaults for	** all concrete instances of the same class.	**<p>	** In this implementation, the built-in defaults are both set to 0,	** which is the most sensible thing to do on Mac OS X.	*/	public void	setDefaultTypes( int defaultFileType, int defaultFileCreator )	{		fileType = defaultFileType;		fileCreator = defaultFileCreator;	}	/**	** Called by makeForkOutputStream() and makeForkRandomRW(),	** or anywhere else a file needs to be created.  NOT called when an existing	** file is merely truncated.	*/	public int	getDefaultFileType()	{  return ( fileType );  }	/**	** Called by makeForkOutputStream() and makeForkRandomRW(),	** or anywhere else a file needs to be created.  NOT called when an existing	** file is merely truncated.	*/	public int	getDefaultFileCreator()	{  return ( fileCreator );  }}