/*** Copyright 2002, 2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely, alter carefully.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the MacBinary Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/#macbinary> */package glguerin.io.imp.mac.ten;import java.io.*;import glguerin.io.*;import glguerin.io.imp.mac.*;// --- Revision History ---// 16Jan2003 GLG  split from TenForker/**** A ResolvingTenForker is like TenForker in all respects but one:** it resolves non-leaf symlinks AND ALIAS-FILES on-the-fly.** This is often a more desirable behavior, but TenForker doesn't provide it for historical reasons.**** @author Gregory Guerin*/public class ResolvingTenForker  extends TenForker{	/**	** Vanilla constructor.	*/	public	ResolvingTenForker()	{  		super();	}	/** Make a concrete FSItem. */	protected FSItem	newFSItem()	{  return ( new ResolvingFSRefItem() );  }	// These static variables could be named identical to those in superclass,	// but I find it clearer to give them different names.	private static int tenType = 0;	private static int tenCreator = 0;	/**	** Set the creator and file types that newly created files will have by default.	** Calling this method on any concrete FileForker instance sets the defaults for	** all concrete instances of the same class.	**<p>	** In this implementation, the built-in defaults are both set to 0,	** which is the most sensible thing to do on Mac OS X.	*/	public void	setDefaultTypes( int defaultFileType, int defaultFileCreator )	{		tenType = defaultFileType;		tenCreator = defaultFileCreator;	}	/**	** Called by makeForkOutputStream() and makeForkRandomRW(),	** or anywhere else a file needs to be created.  NOT called when an existing	** file is merely truncated.	*/	public int	getDefaultFileType()	{  return ( tenType );  }	/**	** Called by makeForkOutputStream() and makeForkRandomRW(),	** or anywhere else a file needs to be created.  NOT called when an existing	** file is merely truncated.	*/	public int	getDefaultFileCreator()	{  return ( tenCreator );  }	/**	** This class just needs to override mayResolve().	** It will still use the superclass's static FSRefItem10 for bootItem(), etc.	** This is fine, because that static variable is read-only after static initialization.	*/	protected static class ResolvingFSRefItem	  extends FSRefItem10	{		/**  Construct an empty instance.  */		public		ResolvingFSRefItem()		{  super();  }		/**		** Called by refPart(), which is called by refItem().		** On entry, myRef1 references an "apparent" directory, symlink, or alias-file.		** Return T if caller should attempt to resolve it, F if not.		**<p>		** An implementation of this method may use myRef1 but must not change it.		** It may use or change myRef2, and also myInfo, ignored[], and hadAlias[].		**<p>		** This imp always returns T.		*/		protected boolean		mayResolve()		{  return ( true );  }	}}