/*** Copyright 1998, 1999, 2001 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely, alter carefully.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the MacBinary Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/#macbinary> */package glguerin.io.imp.mac.jd2;import java.io.*;import glguerin.io.*;import glguerin.io.imp.mac.*;// --- Revision History ---// 17Jan2003 GLG  create/**** A ResolvingNineForker is a subclass of NineForker that automatically** resolves non-leaf aliases on-the-fly.**** @author Gregory Guerin*/public class ResolvingNineForker  extends NineForker{	/**	** Vanilla constructor.	*/	public	ResolvingNineForker()	{  		super();  	}	/** Make a concrete FSItem. */	protected FSItem	newFSItem()	{  return ( new ResolvingFSItem() );  }	private static int ourType = FileInfo.OSTYPE_UNKNOWN;	private static int ourCreator = FileInfo.OSTYPE_UNKNOWN;	/**	** Set the creator and file types that newly created files will have by default.	** Calling this method on any concrete FileForker instance sets the defaults for	** all concrete instances of the same class.	**<p>	** In this implementation, the built-in defaults are both set to FileInfo.OSTYPE_UNKNOWN.	*/	public void	setDefaultTypes( int defaultFileType, int defaultFileCreator )	{		ourType = defaultFileType;		ourCreator = defaultFileCreator;	}	/**	** Called by makeForkOutputStream() and makeForkRandomRW(),	** or anywhere else a file needs to be created.  NOT called when an existing	** file is merely truncated.	*/	public int	getDefaultFileType()	{  return ( ourType );  }	/**	** Called by makeForkOutputStream() and makeForkRandomRW(),	** or anywhere else a file needs to be created.  NOT called when an existing	** file is merely truncated.	*/	public int	getDefaultFileCreator()	{  return ( ourCreator );  }	/**	** This class just needs to override mayResolve().	** It will still use the superclass's static variable for bootItem(), etc.	** This is fine, because that static variable is read-only after static initialization,	** so can be shared between	** NineForker and ResolvingNineForker instances.	*/	protected static class ResolvingFSItem	  extends FSRefItem9	{		/**  Construct an empty instance.  */		public		ResolvingFSItem()		{  super();  }		/**		** Called by refItem().		** Return T if caller should attempt to resolve it, F if not.		**<p>		** Always returns T.  Non-leaf aliases are always resolved on-the-fly.		*/		protected boolean		mayResolve()		{  return ( true );  }	}}