/*** Copyright 2005-2006 by Gregory L. Guerin.**   Distributed as OPEN SOURCE under Artistic License;**    <http://www.amug.org/~glguerin/sw/artistic-license.html>*/package glguerin.io.imp;// --- Revision History ---// 11Dec2005 GLG  create// 21Mar2006 GLG  add isBigEndian() override/**** This is like ByteStruct, but with little-endian interpretation. **** @author Gregory Guerin*/public class ByteStructLE  extends ByteStruct{	/** Create, with no byte[] assigned. */	public	ByteStructLE()	{  super();  }	/** Create with a new array of the given byte-count. */	public	ByteStructLE( int byteCount )	{  this( new byte[ byteCount ] );  }	/** Create with the given array. */	public	ByteStructLE( byte[] bytes )	{		this();		setByteArray( bytes );	}	/**  Is this ByteStruct big-endian?  For this imp, returns F.  */	public boolean	isBigEndian()	{  return ( false );  }	/**	** Return an int holding the unsigned 16-bit value at the given offset.	** Also a building-block for getShortAt();	*/	public int	getUShortAt( int offset )	{  return ( (0xFF00 & (myBytes[ offset + 1 ] << 8)) + (0x00FF & myBytes[ offset ]) );  }	/** Return the signed int at the given offset. */	public int	getIntAt( int offset )	{		int value = (0x0FF & myBytes[ offset + 3 ]) << 24;		value += (0x0FF & myBytes[ offset + 2 ]) << 16;		value += (0x0FF & myBytes[ offset + 1 ]) << 8;		return ( value + (0x0FF & myBytes[ offset ]) );	}	/** Return the signed long at the given offset. */	public long	getLongAt( int offset )	{  return ( (((long) getIntAt( offset + 4 )) << 32) | getUIntAt( offset ) );  }	/**	** Put the given short at the supplied offset.	*/	public void	putShortAt( short value, int offset )	{		myBytes[ offset + 1 ] = (byte) (value >> 8);		myBytes[ offset ] = (byte) (value);	}	/**	** Put the given int at the supplied offset.	*/	public void	putIntAt( int value, int offset )	{		myBytes[ offset + 3 ] = (byte) (value >> 24);		myBytes[ offset + 2 ] = (byte) (value >> 16);		myBytes[ offset + 1 ] = (byte) (value >> 8);		myBytes[ offset ] = (byte) (value);	}	/**	** Put the given long at the supplied offset.	*/	public void	putLongAt( long value, int offset )	{		putIntAt( (int) (value >> 32), offset + 4 );		putIntAt( (int) (value), offset );	}}