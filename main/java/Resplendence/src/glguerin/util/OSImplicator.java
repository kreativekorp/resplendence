/*** Copyright 2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely, alter carefully.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>*/package glguerin.util;/**** OSImplicator is an Implicator that looks for an OS name,** and optionally an OS version-number,** then loads and instantiates a specified className to confirm its availability.** If the appropriate conditions are met in evaluate(), then the constructor-assigned** class name is returned, otherwise null is returned.**<p>** When passing an OS version-number, be sure to provide expected embedded separators** to avoid ambiguity.  For example, the string "9" will match "91" as well as "9.0".** If you want to match only the "9.x" version-numbers, use "9." instead of "9" by itself.** You can extend this technique for minor versions, too, but it WILL NOT match to** a micro-version of ".0" if the micro-version is omitted.  That is, "10.1." will match** "10.1.0" but will not match "10.1".  This could be a problem.*/public class OSImplicator  extends Implicator{	protected final String osName;	protected final String osVersion;	protected final String className;	/**	** Create with given immutable parameters.	** When evaluate() is successful, the provided className String will be returned.	**<p>	** For success, the osName only needs to match the start of the "os.name" property.	** This allows values like "Mac OS" or "Windows" to match an entire family of OS'es.	** If you need more specific matching, provide a longer, more specific osName pattern.	**<p>	** Likewise, the osVersion only needs to match the start of the "os.version" property.	** This lets you easily control how much of major, minor, and micro version-numbers	** to be matched.	** If osVersion is an empty String "", then any non-null "os.version" value will match,	** meaning that only osName's matching will determine what is evaluate()'d.	**<p>	** For any kind of success,	** the Class named by className must be instantiable by Class.newInstance().	** If it's not, then evaluate() will never return its name, even if everything else	** about the Class would otherwise be acceptable, and even when osName	** and osVersion indicate a match.	**<p>	** An empty osName or osVersion String ("") is effectively "don't care",	** because it will match to any non-null value of the respective property.	*/	public	OSImplicator( String osName, String osVersion, String className )	{		this.osName = osName;		this.osVersion = osVersion;		this.className = className;	}	/**	** Evaluate the OS and its version, also instantiating the class-name as a trial.	** The given Object is unused in this implementation.	*/	public Object	evaluate( Object given )	{		// Optionally compile diagnostic emitter.		if ( true )		{			if ( Boolean.getBoolean( "glguerin.util.OSImplicator.debug" ) )			{				System.out.print( " in OSImplicator.evaluate() for: " + className );				System.out.println( ", osName: " + osName + ", osVersion: " + osVersion );			}		}		// Must be a matching OS name and version.		if ( matchOS() )		{			// The named class must be instantiable by newInstance().			try			{				// Try loading the Class and instantiating it, without keeping the new instance.				// The Class must be non-abstract and have a public no-args constructor for this to work.				Class.forName( className ).newInstance();				// By now, class-loading and instantiation must have worked, so return class name.				return ( className );			}			catch ( ThreadDeath rethrown )			{  throw rethrown;  }			catch ( Throwable why )			{  ;  }  // FALL THROUGH to return null		}		return ( null );	}	/**	** Return T only if "os.name" property starts with osName,	** and "os.version" property starts with osVersion.	*/	protected boolean	matchOS()	{		// Must be on an OS starting with osName...		if ( System.getProperty( "os.name", "???" ).startsWith( osName ) )		{			// ...and an OS version starting with osVersion.			if ( System.getProperty( "os.version", "" ).startsWith( osVersion ) )				return ( true );		}		// Default: something didn't match.		return ( false );	}}